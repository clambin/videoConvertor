// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ffmpeg "github.com/clambin/vidconv/internal/ffmpeg"

	mock "github.com/stretchr/testify/mock"
)

// VideoProcessor is an autogenerated mock type for the VideoProcessor type
type VideoProcessor struct {
	mock.Mock
}

type VideoProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *VideoProcessor) EXPECT() *VideoProcessor_Expecter {
	return &VideoProcessor_Expecter{mock: &_m.Mock}
}

// Probe provides a mock function with given fields: ctx, path
func (_m *VideoProcessor) Probe(ctx context.Context, path string) (ffmpeg.Probe, error) {
	ret := _m.Called(ctx, path)

	var r0 ffmpeg.Probe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ffmpeg.Probe, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ffmpeg.Probe); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Get(0).(ffmpeg.Probe)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VideoProcessor_Probe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Probe'
type VideoProcessor_Probe_Call struct {
	*mock.Call
}

// Probe is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *VideoProcessor_Expecter) Probe(ctx interface{}, path interface{}) *VideoProcessor_Probe_Call {
	return &VideoProcessor_Probe_Call{Call: _e.mock.On("Probe", ctx, path)}
}

func (_c *VideoProcessor_Probe_Call) Run(run func(ctx context.Context, path string)) *VideoProcessor_Probe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *VideoProcessor_Probe_Call) Return(_a0 ffmpeg.Probe, _a1 error) *VideoProcessor_Probe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VideoProcessor_Probe_Call) RunAndReturn(run func(context.Context, string) (ffmpeg.Probe, error)) *VideoProcessor_Probe_Call {
	_c.Call.Return(run)
	return _c
}

// NewVideoProcessor creates a new instance of VideoProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVideoProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *VideoProcessor {
	mock := &VideoProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
