// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ffmpeg "github.com/clambin/vidconv/pkg/ffmpeg"
	mock "github.com/stretchr/testify/mock"
)

// VideoConvertor is an autogenerated mock type for the VideoConvertor type
type VideoConvertor struct {
	mock.Mock
}

type VideoConvertor_Expecter struct {
	mock *mock.Mock
}

func (_m *VideoConvertor) EXPECT() *VideoConvertor_Expecter {
	return &VideoConvertor_Expecter{mock: &_m.Mock}
}

// ConvertWithProgress provides a mock function with given fields: ctx, input, output, targetCodec, bitsPerSample, bitrate, progressCallback
func (_m *VideoConvertor) ConvertWithProgress(ctx context.Context, input string, output string, targetCodec string, bitsPerSample int, bitrate int, progressCallback func(ffmpeg.Progress)) error {
	ret := _m.Called(ctx, input, output, targetCodec, bitsPerSample, bitrate, progressCallback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int, func(ffmpeg.Progress)) error); ok {
		r0 = rf(ctx, input, output, targetCodec, bitsPerSample, bitrate, progressCallback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VideoConvertor_ConvertWithProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertWithProgress'
type VideoConvertor_ConvertWithProgress_Call struct {
	*mock.Call
}

// ConvertWithProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - input string
//   - output string
//   - targetCodec string
//   - bitsPerSample int
//   - bitrate int
//   - progressCallback func(ffmpeg.Progress)
func (_e *VideoConvertor_Expecter) ConvertWithProgress(ctx interface{}, input interface{}, output interface{}, targetCodec interface{}, bitsPerSample interface{}, bitrate interface{}, progressCallback interface{}) *VideoConvertor_ConvertWithProgress_Call {
	return &VideoConvertor_ConvertWithProgress_Call{Call: _e.mock.On("ConvertWithProgress", ctx, input, output, targetCodec, bitsPerSample, bitrate, progressCallback)}
}

func (_c *VideoConvertor_ConvertWithProgress_Call) Run(run func(ctx context.Context, input string, output string, targetCodec string, bitsPerSample int, bitrate int, progressCallback func(ffmpeg.Progress))) *VideoConvertor_ConvertWithProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int), args[5].(int), args[6].(func(ffmpeg.Progress)))
	})
	return _c
}

func (_c *VideoConvertor_ConvertWithProgress_Call) Return(_a0 error) *VideoConvertor_ConvertWithProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VideoConvertor_ConvertWithProgress_Call) RunAndReturn(run func(context.Context, string, string, string, int, int, func(ffmpeg.Progress)) error) *VideoConvertor_ConvertWithProgress_Call {
	_c.Call.Return(run)
	return _c
}

// NewVideoConvertor creates a new instance of VideoConvertor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVideoConvertor(t interface {
	mock.TestingT
	Cleanup(func())
}) *VideoConvertor {
	mock := &VideoConvertor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
